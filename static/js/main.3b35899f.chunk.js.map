{"version":3,"sources":["Splash.tsx","Header.tsx","Navbar.tsx","Story.tsx","Tabloid.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Splash","id","href","Header","className","Navbar","Story","dateTime","srcSet","media","src","alt","Tabloid","Footer","htmlFor","type","name","required","App","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAuBeA,G,kBApBU,kBACxB,4BAAQC,GAAG,UACV,6CAGA,+CAGC,uBAAGC,KAAK,+BAAR,eAGA,6BAND,mCCMaC,G,MAXU,kBACxB,4BAAQF,GAAG,UACV,uBACCG,UAAU,OACVF,KAAK,YAFN,gBCsBaG,G,MAxBU,kBACxB,yBAAKJ,GAAG,UACP,wBAAIG,UAAU,SACb,wBAAIA,UAAU,UACb,uBAAGF,KAAK,YAAR,YAED,4BACC,uBAAGA,KAAK,YAAR,YAED,4BACC,uBAAGA,KAAK,YAAR,aAGF,wBAAIE,UAAU,SACb,4BACC,uBAAGF,KAAK,YAAR,iBAED,4BACC,uBAAGA,KAAK,YAAR,qBCyBWI,G,YA3CS,kBACvB,6BAASF,UAAU,SAClB,0BACCA,UAAU,iBACVG,SAAS,cAFV,oBAMA,4BACC,uBAAGL,KAAK,YAAR,iBAID,uBACCE,UAAU,aACVF,KAAK,YAEL,iCACC,4BACCM,OAAO,mCACPC,MAAM,uBAEP,yBACCC,IAAI,kCACJC,IAAI,yBAIP,mOAMA,uBACCP,UAAU,SACVF,KAAK,YAFN,iBCpBaU,EAVW,kBACzB,0BAAMX,GAAG,WACR,6BAASA,GAAG,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCmDYY,G,MA5DU,kBACxB,4BAAQZ,GAAG,UACV,6BAASA,GAAG,gBACX,8BACC,2BAAOa,QAAQ,QAAf,QAGA,2BACCC,KAAK,OACLd,GAAG,OACHe,KAAK,OACLC,UAAQ,IAET,2BAAOH,QAAQ,SAAf,SAGA,2BACCC,KAAK,QACLd,GAAG,QACHe,KAAK,QACLC,UAAQ,IAET,2BAAOH,QAAQ,WAAf,WAGA,8BACCb,GAAG,UACHe,KAAK,YAEN,4BACCZ,UAAU,SACVW,KAAK,UAFN,kBAQF,6BAASd,GAAG,WACX,iCACC,oCACA,yDAID,iCACC,qCACA,iCACC,4BACC,uCACA,wCACA,yCACA,sCACA,+CC3BSiB,EAbO,kBACrB,oCACC,yBAAKjB,GAAG,WACP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAED,yBAAKA,GAAG,iBCZUkB,QACU,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC3B,2DCNFC,IAAQC,WAAW,kBACnBD,IAAQE,SAASN,OAAOC,SAASM,SAAWP,OAAOC,SAASO,QAG5DC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GACnCA,EAAaC,kB","file":"static/js/main.3b35899f.chunk.js","sourcesContent":["import React from 'react'\nimport './Splash.scss'\n\nconst Splash: React.FC = () => (\n\t<header id='splash'>\n\t\t<h1>\n\t\t\tNolan Kovacik\n\t\t</h1>\n\t\t<p>\n\t\t\tA student at\n\t\t\t&nbsp;\n\t\t\t<a href='https://www.makeschool.com/'>\n\t\t\t\tMake School\n\t\t\t</a>\n\t\t\t<br />\n\t\t\twith a passion for frontend.\n\t\t</p>\n\t\t{/* <a href='#nothing'>\n\t\t\tMore Info\n\t\t</a> */}\n\t</header>\n)\n\nexport default Splash\n","import React from 'react'\nimport './Header.scss'\n\nconst Header: React.FC = () => (\n\t<header id='header'>\n\t\t<a\n\t\t\tclassName='logo'\n\t\t\thref='#nothing'\n\t\t>\n\t\t\tPortfolio\n\t\t</a>\n\t</header>\n)\n\nexport default Header\n","import React from 'react'\nimport './Navbar.scss'\n\nconst Navbar: React.FC = () => (\n\t<nav id='navbar'>\n\t\t<ul className='links'>\n\t\t\t<li className='active'>\n\t\t\t\t<a href='#nothing'>topic 1</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href='#nothing'>topic 2</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href='#nothing'>topic 3</a>\n\t\t\t</li>\n\t\t</ul>\n\t\t<ul className='icons'>\n\t\t\t<li>\n\t\t\t\t<a href='#nothing'>social media</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href='#nothing'>social media</a>\n\t\t\t</li>\n\t\t</ul>\n\t</nav>\n)\n\nexport default Navbar\n","import React from 'react'\nimport './Story.scss'\n\nconst Story: React.FC = () => (\n\t<article className='story'>\n\t\t<time\n\t\t\tclassName='date-published'\n\t\t\tdateTime='10-21-2019'\n\t\t>\n\t\t\tOctober 21, 2019\n\t\t</time>\n\t\t<h1>\n\t\t\t<a href='#nothing'>\n\t\t\t\tStory Header\n\t\t\t</a>\n\t\t</h1>\n\t\t<a\n\t\t\tclassName='img-portal'\n\t\t\thref='#nothing'\n\t\t>\n\t\t\t<picture>\n\t\t\t\t<source\n\t\t\t\t\tsrcSet='https://placekitten.com/1024/512'\n\t\t\t\t\tmedia='(min-width: 800px)'\n\t\t\t\t/>\n\t\t\t\t<img\n\t\t\t\t\tsrc='https://placekitten.com/512/320'\n\t\t\t\t\talt='placeholder kitten'\n\t\t\t\t/>\n\t\t\t</picture>\n\t\t</a>\n\t\t<p>\n\t\t\tAenean ornare velit lacus varius enim ullamcorper proin,\n\t\t\taliquam facilisis ante sed etiam magna interdum congue.\n\t\t\tLorem ipsum dolor amet nullam sed etiam veroeros.\n\t\t\tJoilinaski asdif disinti vololox.\n\t\t</p>\n\t\t<a\n\t\t\tclassName='button'\n\t\t\thref='#nothing'\n\t\t>\n\t\t\tFull Story\n\t\t</a>\n\t</article>\n)\n\nexport default Story\n","import React from 'react'\nimport './Tabloid.scss'\n// this @ts-ignore option is a personal convention\n// ? how to set this up in tsconfig ?\n// @ts-ignore\nimport Story from './Story.tsx'\n\nconst Tabloid: React.FC = () => (\n\t<main id='tabloid'>\n\t\t<section id='stories'>\n\t\t\t<Story />\n\t\t\t<Story />\n\t\t\t<Story />\n\t\t</section>\n\t</main>\n)\n\nexport default Tabloid\n","import React from 'react'\nimport './Footer.scss'\n\nconst Footer: React.FC = () => (\n\t<footer id='footer'>\n\t\t<section id='get-in-touch'>\n\t\t\t<form>\n\t\t\t\t<label htmlFor='name'>\n\t\t\t\t\tName\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid='name'\n\t\t\t\t\tname='name'\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<label htmlFor='email'>\n\t\t\t\t\tEmail\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='email'\n\t\t\t\t\tid='email'\n\t\t\t\t\tname='email'\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<label htmlFor='message'>\n\t\t\t\t\tMessage\n\t\t\t\t</label>\n\t\t\t\t<textarea\n\t\t\t\t\tid='message'\n\t\t\t\t\tname='message'\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName='button'\n\t\t\t\t\ttype='submit'\n\t\t\t\t>\n\t\t\t\t\tSend Message\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</section>\n\t\t<section id='contact'>\n\t\t\t<section>\n\t\t\t\t<p>Email</p>\n\t\t\t\t<address>\n\t\t\t\t\tmy_handle@email.com\n\t\t\t\t</address>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<p>Social</p>\n\t\t\t\t<address>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Twitter</li>\n\t\t\t\t\t\t<li>Facebook</li>\n\t\t\t\t\t\t<li>Instagram</li>\n\t\t\t\t\t\t<li>GitHub</li>\n\t\t\t\t\t\t<li>LinkedIn</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</address>\n\t\t\t</section>\n\t\t</section>\n\t</footer>\n)\n\nexport default Footer\n","import React from 'react'\nimport './App.scss'\n// this @ts-ignore option is a personal convention\n// ? how to set this up in tsconfig ?\n// @ts-ignore\nimport Splash from './Splash.tsx'\n// @ts-ignore\nimport Header from './Header.tsx'\n// @ts-ignore\nimport Navbar from './Navbar.tsx'\n// @ts-ignore\nimport Tabloid from './Tabloid.tsx'\n// @ts-ignore\nimport Footer from './Footer.tsx'\n\nconst App: React.FC = () => (\n\t<>\n\t\t<div id='content'>\n\t\t\t<Splash />\n\t\t\t<Header />\n\t\t\t<Navbar />\n\t\t\t<Tabloid />\n\t\t\t<Footer />\n\t\t</div>\n\t\t<div id='background' />\n\t</>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost'\n\t// [::1] is the IPv6 localhost address.\n\t|| window.location.hostname === '[::1]'\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t|| window.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n)\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href,\n\t\t)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service',\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ',\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404\n\t\t\t\t|| (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ReactGA from 'react-ga'\nimport './index.scss'\n// this @ts-ignore option is a personal convention\n// ? how to set this up in tsconfig ?\n// @ts-ignore\nimport App from './App.tsx'\n// @ts-ignore\nimport * as serviceWorker from './serviceWorker.ts'\n\n// create google analytics tracker\nReactGA.initialize('UA-150733024-1')\nReactGA.pageview(window.location.pathname + window.location.search)\n\n// insert app into root\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster,\n// you can change unregister() to register() below.\n// Note this comes with some pitfalls. Learn more about\n// service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}